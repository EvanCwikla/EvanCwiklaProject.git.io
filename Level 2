import pygame, sys, time

pygame.init()

# --- CONFIG ---
TILE = 32
GRID_W, GRID_H = 61, 41
VIEW_W, VIEW_H = 20, 15
WIDTH, HEIGHT = VIEW_W * TILE, VIEW_H * TILE

# Colors
BLACK = (0, 0, 0)
GRAY = (80, 80, 80)
GREEN = (0, 200, 0)
RED = (200, 0, 0)
BLUE = (0, 120, 255)
YELLOW = (240, 240, 0)
BROWN = (160, 80, 40)
WHITE = (255, 255, 255)

# --- SCREEN ---
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Temple Ruins - Level 2 (Zig-Zag Dungeon)")
clock = pygame.time.Clock()
FPS = 60


# --- PLAYER ---
class Player:
    def __init__(self, x, y):
        self.x, self.y = x, y

    def move(self, dx, dy, walls, closed_gates):
        nx, ny = self.x + dx, self.y + dy
        if (nx, ny) not in walls and (nx, ny) not in closed_gates:
            self.x, self.y = nx, ny

    def draw(self, surf, cam_x, cam_y):
        pygame.draw.rect(surf, GREEN,
                         ((self.x - cam_x) * TILE, (self.y - cam_y) * TILE, TILE, TILE))


# --- SWITCH ---
class Switch:
    def __init__(self, x, y, color, order_index, group_id):
        self.x, self.y = x, y
        self.color = color
        self.order_index = order_index
        self.group_id = group_id
        self.activated = False

    def draw(self, surf, cam_x, cam_y):
        c = self.color if not self.activated else WHITE
        pygame.draw.circle(surf, c,
                           ((self.x - cam_x) * TILE + TILE // 2,
                            (self.y - cam_y) * TILE + TILE // 2), TILE // 3)


# --- DOOR ---
class Door:
    def __init__(self, x, y):
        self.x, self.y = x, y
        self.locked = True

    def draw(self, surf, cam_x, cam_y):
        color = BROWN if self.locked else BLUE
        pygame.draw.rect(surf, color,
                         ((self.x - cam_x) * TILE, (self.y - cam_y) * TILE, TILE, TILE))


# --- LEVEL LAYOUT ---
def load_level():
    walls = set()

    # Fill everything with walls
    for x in range(GRID_W):
        for y in range(GRID_H):
            walls.add((x, y))

    def carve_rect(x1, y1, x2, y2):
        """Carve an open rectangular room"""
        for x in range(x1, x2 + 1):
            for y in range(y1, y2 + 1):
                walls.discard((x, y))

    # Rooms carved zig-zag style
    carve_rect(2, 2, 14, 12)  # Start Room (top-left)
    carve_rect(20, 5, 34, 15)  # Puzzle Room 1 (to the right)
    carve_rect(8, 18, 22, 30)  # Puzzle Room 2 (down-left)
    carve_rect(28, 20, 46, 32)  # Final Chamber (down-right)

    # Corridors
    carve_rect(14, 7, 19, 7)  # Corridor A (Start → Room 1)
    carve_rect(26, 15, 26, 18)  # Corridor B (Room 1 → Room 2)
    carve_rect(22, 25, 28, 25)  # Corridor C (Room 2 → Final)

    # Gates block the corridors
    gates = {
        "A": {(16, 7)},  # Gate A
        "B": {(26, 16)},  # Gate B
        "C": {(25, 25)},  # Gate C
    }

    # Switches (two per group)
    switches = [
        # Group A
        Switch(5, 5, RED, 0, "A"),
        Switch(12, 10, GREEN, 1, "A"),

        # Group B
        Switch(22, 7, BLUE, 0, "B"),
        Switch(32, 13, YELLOW, 1, "B"),

        # Group C
        Switch(12, 20, RED, 0, "C"),
        Switch(20, 28, GREEN, 1, "C"),
    ]

    # Door in Final Chamber
    door = Door(40, 25)

    # Player
    player = Player(4, 7)

    return player, walls, switches, gates, door


# --- CAMERA ---
def get_camera(player_x, player_y):
    cam_x = max(0, min(player_x - VIEW_W // 2, GRID_W - VIEW_W))
    cam_y = max(0, min(player_y - VIEW_H // 2, GRID_H - VIEW_H))
    return cam_x, cam_y


# --- MAIN LOOP ---
def main():
    player, walls, switches, gates, door = load_level()

    # Gate states
    sequences = {"A": [0, 1], "B": [0, 1], "C": [0, 1]}
    current_orders = {"A": [], "B": [], "C": []}
    gates_open = {"A": False, "B": False, "C": False}
    timers = {"A": 0, "B": 0, "C": 0}

    while True:
        for e in pygame.event.get():
            if e.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            elif e.type == pygame.KEYDOWN:
                closed_gates = set().union(*[g for gid, g in gates.items() if not gates_open[gid]])
                if e.key == pygame.K_UP:    player.move(0, -1, walls, closed_gates)
                if e.key == pygame.K_DOWN:  player.move(0, 1, walls, closed_gates)
                if e.key == pygame.K_LEFT:  player.move(-1, 0, walls, closed_gates)
                if e.key == pygame.K_RIGHT: player.move(1, 0, walls, closed_gates)

        # --- Switch logic ---
        for s in switches:
            if (player.x, player.y) == (s.x, s.y) and not s.activated:
                s.activated = True
                current_orders[s.group_id].append(s.order_index)
                print(f"Switch {s.group_id}-{s.order_index} pressed")

                # Check sequence
                if current_orders[s.group_id] == sequences[s.group_id]:
                    gates_open[s.group_id] = True
                    timers[s.group_id] = time.time()
                    print(f"Gate {s.group_id} opened!")
                elif not sequences[s.group_id][:len(current_orders[s.group_id])] == current_orders[s.group_id]:
                    print(f"Wrong order for Gate {s.group_id}, reset.")
                    current_orders[s.group_id] = []
                    for sw in switches:
                        if sw.group_id == s.group_id:
                            sw.activated = False

        # --- Timed gates ---
        for gid in gates_open:
            if gates_open[gid] and time.time() - timers[gid] > 15:  # 15s open
                gates_open[gid] = False
                print(f"Gate {gid} closed!")

        # Unlock door when Gate C solved
        if gates_open["C"]:
            door.locked = False

        # Win
        if not door.locked and (player.x, player.y) == (door.x, door.y):
            print("Level Complete!")
            pygame.quit()
            sys.exit()

        # --- Camera ---
        cam_x, cam_y = get_camera(player.x, player.y)

        # --- Draw ---
        screen.fill(BLACK)

        # Walls
        for (x, y) in walls:
            if cam_x <= x < cam_x + VIEW_W and cam_y <= y < cam_y + VIEW_H:
                pygame.draw.rect(screen, GRAY,
                                 ((x - cam_x) * TILE, (y - cam_y) * TILE, TILE, TILE))

        # Gates
        for gid, gset in gates.items():
            if not gates_open[gid]:
                for (x, y) in gset:
                    if cam_x <= x < cam_x + VIEW_W and cam_y <= y < cam_y + VIEW_H:
                        pygame.draw.rect(screen, BROWN,
                                         ((x - cam_x) * TILE, (y - cam_y) * TILE, TILE, TILE))

        # Switches
        for s in switches:
            s.draw(screen, cam_x, cam_y)

        # Door + Player
        door.draw(screen, cam_x, cam_y)
        player.draw(screen, cam_x, cam_y)

        pygame.display.flip()
        clock.tick(FPS)


if __name__ == "__main__":
    main()
